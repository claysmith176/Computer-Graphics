    Hittable_List boxes1;
    auto ground = std::make_shared<Lambertian>(color(0.48, 0.83, 0.53));

    const int boxes_per_side = 10;
    for (int i = 0; i < 14; i++) {
        for (int j = 0; j < 15; j++) {
            auto w = 100.0;
            auto x0 = -700.0 + i * w;
            auto z0 = -600.0 + j * w;
            auto y0 = 0.0;
            auto x1 = x0 + w;
            auto y1 = random_float(1, 101);
            auto z1 = z0 + w;

            boxes1.add(std::make_shared<Box>(vec3(x0, y0, z0), vec3(x1, y1, z1), ground));
        }
    }

    Hittable_List objects;

    //Ground squares
    objects.add(std::make_shared<bvh>(boxes1, 0, 1));

    //Ceiling Light
    auto light = std::make_shared<Diffuse_Light>(vec3(7, 7, 7));
    objects.add(std::make_shared<XZ_Rect>(123, 423, 147, 412, 554, light));

    //Orange Moving Sphere
    auto center1 = vec3(400, 400, 200);
    auto center2 = center1 + vec3(30, 0, 0);
    auto moving_sphere_material = std::make_shared<Lambertian>(vec3(0.7, 0.3, 0.1));
    objects.add(std::make_shared<Moving_sphere>(center1, center2, 0, 1, 50, moving_sphere_material));

    //Clear Glass Sphere
    objects.add(std::make_shared<Sphere>(vec3(260, 150, 45), 50, std::make_shared<Dielectric>(1.5)));
    
    //Silver Metal Sphere
    objects.add(std::make_shared<Sphere>(
        vec3(0, 150, 145), 50, std::make_shared<Metal>(vec3(0.8, 0.8, 0.9), 1.0)
        ));

    //Blue Glass Sphere
    auto boundry = std::make_shared<Sphere>(vec3(360, 155, 145), 70, std::make_shared<Dielectric>(1.5));
    objects.add(boundry);
    objects.add(std::make_shared<Constant_Volume>(boundry, 0.2, color(0.2, 0.4, 0.9)));
    
    //Large fog over entire scene
    //boundry = std::make_shared<Sphere>(point3(0, 0, 0), 5000, std::make_shared<Dielectric>(1.5));
    //objects.add(std::make_shared<Constant_Volume>(boundry, .0001, color(1, 1, 1)));

    //Globe
    auto emat = std::make_shared<Lambertian>(std::make_shared<Image_Texture>("earth.jpg"));
    objects.add(std::make_shared<Sphere>(vec3(400, 220, 400), 100, emat));
    
    //Noisy Sphere in Center
    auto pertext = std::make_shared<Noise_Texture>(0.1);
    objects.add(std::make_shared<Sphere>(vec3(220, 280, 300), 80, std::make_shared<Lambertian>(pertext)));

    //Box of Spheres
    Hittable_List boxes2;
    auto white = std::make_shared<Lambertian>(vec3(.73, .73, .73));
    int ns = 900;
    for (int j = 0; j < ns; j++) {
        boxes2.add(std::make_shared<Sphere>(vec3(random_float(-100, 65), random_float(270, 435), random_float(395, 560)), 10, white));
    }
    objects.add(std::make_shared<bvh>(boxes2, 0, 1));
    return objects;

vec3 lookfrom(478, 278, -600);
vec3 lookat(278, 278, 0);
vec3 up(0, 1, 0);
float hfov = 40;

const float aspect_ratio = 1;
const int image_height = 800;